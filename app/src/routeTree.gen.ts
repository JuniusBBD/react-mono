/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const PortalLazyImport = createFileRoute('/portal')()
const DeviceActivationLazyImport = createFileRoute('/device-activation')()
const BrokersLazyImport = createFileRoute('/brokers')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const PortalLazyRoute = PortalLazyImport.update({
  path: '/portal',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/portal.lazy').then((d) => d.Route))

const DeviceActivationLazyRoute = DeviceActivationLazyImport.update({
  path: '/device-activation',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/device-activation.lazy').then((d) => d.Route),
)

const BrokersLazyRoute = BrokersLazyImport.update({
  path: '/brokers',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/brokers.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/brokers': {
      id: '/brokers'
      path: '/brokers'
      fullPath: '/brokers'
      preLoaderRoute: typeof BrokersLazyImport
      parentRoute: typeof rootRoute
    }
    '/device-activation': {
      id: '/device-activation'
      path: '/device-activation'
      fullPath: '/device-activation'
      preLoaderRoute: typeof DeviceActivationLazyImport
      parentRoute: typeof rootRoute
    }
    '/portal': {
      id: '/portal'
      path: '/portal'
      fullPath: '/portal'
      preLoaderRoute: typeof PortalLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/brokers': typeof BrokersLazyRoute
  '/device-activation': typeof DeviceActivationLazyRoute
  '/portal': typeof PortalLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/brokers': typeof BrokersLazyRoute
  '/device-activation': typeof DeviceActivationLazyRoute
  '/portal': typeof PortalLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/brokers': typeof BrokersLazyRoute
  '/device-activation': typeof DeviceActivationLazyRoute
  '/portal': typeof PortalLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/brokers' | '/device-activation' | '/portal'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/brokers' | '/device-activation' | '/portal'
  id: '__root__' | '/' | '/brokers' | '/device-activation' | '/portal'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  BrokersLazyRoute: typeof BrokersLazyRoute
  DeviceActivationLazyRoute: typeof DeviceActivationLazyRoute
  PortalLazyRoute: typeof PortalLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  BrokersLazyRoute: BrokersLazyRoute,
  DeviceActivationLazyRoute: DeviceActivationLazyRoute,
  PortalLazyRoute: PortalLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/brokers",
        "/device-activation",
        "/portal"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/brokers": {
      "filePath": "brokers.lazy.tsx"
    },
    "/device-activation": {
      "filePath": "device-activation.lazy.tsx"
    },
    "/portal": {
      "filePath": "portal.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
